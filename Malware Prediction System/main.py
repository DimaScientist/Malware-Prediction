import eel
import lightgbm as lgb
from lightgbm import LGBMClassifier
import pandas as pd
import numpy
from joblib import load
import datetime

model_path = "models/lgb_model.txt"

dtypes = {
    'MachineIdentifier':                                    'category',
    'ProductName':                                          'category',
    'EngineVersion':                                        'category',
    'AppVersion':                                           'category',
    'AvSigVersion':                                         'category',
    'IsBeta':                                               'int8',
    'RtpStateBitfield':                                     'float16',
    'IsSxsPassiveMode':                                     'int8',
    'DefaultBrowsersIdentifier':                            'float32',
    'AVProductStatesIdentifier':                            'float32',
    'AVProductsInstalled':                                  'float16',
    'AVProductsEnabled':                                    'float16',
    'HasTpm':                                               'int8',
    'CountryIdentifier':                                    'int16',
    'CityIdentifier':                                       'float32',
    'OrganizationIdentifier':                               'float16',
    'GeoNameIdentifier':                                    'float16',
    'LocaleEnglishNameIdentifier':                          'int16',
    'Platform':                                             'category',
    'Processor':                                            'category',
    'OsVer':                                                'category',
    'OsBuild':                                              'int16',
    'OsSuite':                                              'int16',
    'OsPlatformSubRelease':                                 'category',
    'OsBuildLab':                                           'category',
    'SkuEdition':                                           'category',
    'IsProtected':                                          'float16',
    'AutoSampleOptIn':                                      'int8',
    'PuaMode':                                              'category',
    'SMode':                                                'float16',
    'IeVerIdentifier':                                      'float16',
    'SmartScreen':                                          'category',
    'Firewall':                                             'float16',
    'UacLuaenable':                                         'float64',  # was 'float32'
    'Census_MDC2FormFactor':                                'category',
    'Census_DeviceFamily':                                  'category',
    'Census_OEMNameIdentifier':                             'float32',  # was 'float16'
    'Census_OEMModelIdentifier':                            'float32',
    'Census_ProcessorCoreCount':                            'float16',
    'Census_ProcessorManufacturerIdentifier':               'float16',
    'Census_ProcessorModelIdentifier':                      'float32',  # was 'float16'
    'Census_ProcessorClass':                                'category',
    'Census_PrimaryDiskTotalCapacity':                      'float64',  # was 'float32'
    'Census_PrimaryDiskTypeName':                           'category',
    'Census_SystemVolumeTotalCapacity':                     'float64',  # was 'float32'
    'Census_HasOpticalDiskDrive':                           'int8',
    'Census_TotalPhysicalRAM':                              'float32',
    'Census_ChassisTypeName':                               'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',  # was 'float16'
    'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',  # was 'float16'
    'Census_InternalPrimaryDisplayResolutionVertical':      'float32',  # was 'float16'
    'Census_PowerPlatformRoleName':                         'category',
    'Census_InternalBatteryType':                           'category',
    'Census_InternalBatteryNumberOfCharges':                'float64',  # was 'float32'
    'Census_OSVersion':                                     'category',
    'Census_OSArchitecture':                                'category',
    'Census_OSBranch':                                      'category',
    'Census_OSBuildNumber':                                 'int16',
    'Census_OSBuildRevision':                               'int32',
    'Census_OSEdition':                                     'category',
    'Census_OSSkuName':                                     'category',
    'Census_OSInstallTypeName':                             'category',
    'Census_OSInstallLanguageIdentifier':                   'float16',
    'Census_OSUILocaleIdentifier':                          'int16',
    'Census_OSWUAutoUpdateOptionsName':                     'category',
    'Census_IsPortableOperatingSystem':                     'int8',
    'Census_GenuineStateName':                              'category',
    'Census_ActivationChannel':                             'category',
    'Census_IsFlightingInternal':                           'float16',
    'Census_IsFlightsDisabled':                             'float16',
    'Census_FlightRing':                                    'category',
    'Census_ThresholdOptIn':                                'float16',
    'Census_FirmwareManufacturerIdentifier':                'float16',
    'Census_FirmwareVersionIdentifier':                     'float32',
    'Census_IsSecureBootEnabled':                           'int8',
    'Census_IsWIMBootEnabled':                              'float16',
    'Census_IsVirtualDevice':                               'float16',
    'Census_IsTouchEnabled':                                'int8',
    'Census_IsPenCapable':                                  'int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
    'Wdft_IsGamer':                                         'float16',
    'Wdft_RegionIdentifier':                                'float16',
    'HasDetections':                                        'int8'
}

new_columns = [	'EngineVersion',
                'AppVersion',
                'AvSigVersion',
                'AVProductStatesIdentifier',
                'AVProductsInstalled',
                'CountryIdentifier',
                'CityIdentifier',
                'OrganizationIdentifier',
                'GeoNameIdentifier',
                'LocaleEnglishNameIdentifier',
                'OsBuild',
                'OsSuite',
                'OsPlatformSubRelease',
                'OsBuildLab',
                'SkuEdition',
                'IeVerIdentifier',
                'SmartScreen',
                'Census_MDC2FormFactor',
                'Census_OEMNameIdentifier',
                'Census_OEMModelIdentifier',
                'Census_ProcessorCoreCount',
                'Census_ProcessorManufacturerIdentifier',
                'Census_ProcessorModelIdentifier',
                'Census_PrimaryDiskTotalCapacity',
                'Census_PrimaryDiskTypeName',
                'Census_SystemVolumeTotalCapacity',
                'Census_TotalPhysicalRAM',
                'Census_ChassisTypeName',
                'Census_InternalPrimaryDiagonalDisplaySizeInInches',
                'Census_InternalPrimaryDisplayResolutionHorizontal',
                'Census_InternalPrimaryDisplayResolutionVertical',
                'Census_PowerPlatformRoleName',
                'Census_InternalBatteryType',
                'Census_InternalBatteryNumberOfCharges',
                'Census_OSVersion',
                'Census_OSBranch',
                'Census_OSBuildNumber',
                'Census_OSBuildRevision',
                'Census_OSEdition',
                'Census_OSSkuName',
                'Census_OSInstallTypeName',
                'Census_OSInstallLanguageIdentifier',
                'Census_OSUILocaleIdentifier',
                'Census_OSWUAutoUpdateOptionsName',
                'Census_GenuineStateName',
                'Census_ActivationChannel',
                'Census_FirmwareManufacturerIdentifier',
                'Census_FirmwareVersionIdentifier',
                'Census_IsSecureBootEnabled',
                'Census_IsTouchEnabled',
                'Wdft_IsGamer',
                'Wdft_RegionIdentifier'
                ]

lgb_model = LGBMClassifier()
data = pd.DataFrame()

def feature_engineer(old_df):
    df = old_df.copy()

    df = df.drop(columns=[], axis=1)

    df['OsBuildLab'] = df['OsBuildLab'].cat.add_categories(['0.0.0.0.0-0'])
    df['OsBuildLab'] = df['OsBuildLab'].fillna('0.0.0.0.0-0')

    df['EngineVersion_2'] = df['EngineVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')
    df['EngineVersion_3'] = df['EngineVersion'].apply(
        lambda x: x.split('.')[3]).astype('category')

    df['AppVersion_1'] = df['AppVersion'].apply(
        lambda x: x.split('.')[1]).astype('category')
    df['AppVersion_2'] = df['AppVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')
    df['AppVersion_3'] = df['AppVersion'].apply(
        lambda x: x.split('.')[3]).astype('category')

    df['AvSigVersion_0'] = df['AvSigVersion'].apply(
        lambda x: x.split('.')[0]).astype('category')
    df['AvSigVersion_1'] = df['AvSigVersion'].apply(
        lambda x: x.split('.')[1]).astype('category')
    df['AvSigVersion_2'] = df['AvSigVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')

    df['OsBuildLab_0'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[0]).astype('category')
    df['OsBuildLab_1'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[1]).astype('category')
    df['OsBuildLab_2'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[2]).astype('category')
    df['OsBuildLab_3'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[3]).astype('category')

    df['Census_OSVersion_0'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[0]).astype('category')
    df['Census_OSVersion_1'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[1]).astype('category')
    df['Census_OSVersion_2'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')
    df['Census_OSVersion_3'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[3]).astype('category')

    df['Primary_Drive_Ratio'] = df['Census_SystemVolumeTotalCapacity'] / \
        df['Census_PrimaryDiskTotalCapacity']
    df['Non_Primary_Drive_MB'] = df['Census_PrimaryDiskTotalCapacity'] - \
        df['Census_SystemVolumeTotalCapacity']

    df['Aspect_Ratio'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'] / \
        df['Census_InternalPrimaryDisplayResolutionVertical']

    df['Monitor_Dims'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'].astype(
        str) + '*' + df['Census_InternalPrimaryDisplayResolutionVertical'].astype(str)
    df['Monitor_Dims'] = df['Monitor_Dims'].astype('category')

    df['dpi'] = ((df['Census_InternalPrimaryDisplayResolutionHorizontal']**2 +
                 df['Census_InternalPrimaryDisplayResolutionVertical']**2)**.5)/(df['Census_InternalPrimaryDiagonalDisplaySizeInInches'])

    df['dpi_square'] = df['dpi'] ** 2

    df['MegaPixels'] = (df['Census_InternalPrimaryDisplayResolutionHorizontal']
                        * df['Census_InternalPrimaryDisplayResolutionVertical'])/1e6

    df['Screen_Area'] = (df['Aspect_Ratio'] * (
        df['Census_InternalPrimaryDiagonalDisplaySizeInInches']**2))/(df['Aspect_Ratio']**2 + 1)

    df['ram_per_processor'] = df['Census_TotalPhysicalRAM'] / \
        df['Census_ProcessorCoreCount']

    df['new_num_0'] = df['Census_InternalPrimaryDiagonalDisplaySizeInInches'] / \
        df['Census_ProcessorCoreCount']

    df['new_num_1'] = df['Census_ProcessorCoreCount'] * \
        df['Census_InternalPrimaryDiagonalDisplaySizeInInches']

#     df['Census_IsFlightingInternal'] = df['Census_IsFlightingInternal'].fillna(1)
#     df['Census_ThresholdOptIn'] = df['Census_ThresholdOptIn'].fillna(1)
#     df['Census_IsWIMBootEnabled'] = df['Census_IsWIMBootEnabled'].fillna(1)
    df['Wdft_IsGamer'] = df['Wdft_IsGamer'].fillna(0)

    new_cat_cols = [col for col in df.columns if col not in ['MachineIdentifier',
                                                             'Census_SystemVolumeTotalCapacity', 'HasDetections'] and str(df[col].dtype) == 'category']
    indexer = {}
    for col in new_cat_cols:
        _, indexer[col] = pd.factorize(
            df[col].astype(str), sort=True)
    
    for col in new_cat_cols:
        df[col] = indexer[col].get_indexer(df[col].astype(str))
    return df   


def prepare_data(old_df):
    return feature_engineer(old_df[new_columns])

def get_predictions(filepath):
    result = pd.DataFrame(columns=['MachineIdentifier', 'HasDetections'])
    df = pd.read_csv(filepath, dtype=dtypes)
    result['MachineIdentifier'] = df['MachineIdentifier']
    test_data = prepare_data(df)
    result['HasDetections'] = lgb_model.predict(test_data)
    return result

@eel.expose
def save_template():
    columns = [
    'MachineIdentifier',
    'ProductName',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'IsBeta',
    'RtpStateBitfield',
    'IsSxsPassiveMode',
    'DefaultBrowsersIdentifier',
    'AVProductStatesIdentifier',
    'AVProductsInstalled',
    'AVProductsEnabled',
    'HasTpm',
    'CountryIdentifier',
    'CityIdentifier',
    'OrganizationIdentifier',
    'GeoNameIdentifier',
    'LocaleEnglishNameIdentifier',
    'Platform',
    'Processor',
    'OsVer',
    'OsBuild',
    'OsSuite',
    'OsPlatformSubRelease',
    'OsBuildLab',
    'SkuEdition',
    'IsProtected',
    'AutoSampleOptIn',
    'PuaMode',
    'SMode',
    'IeVerIdentifier',
    'SmartScreen',
    'Firewall',
    'UacLuaenable', 
    'Census_MDC2FormFactor',
    'Census_DeviceFamily',
    'Census_OEMNameIdentifier',  
    'Census_OEMModelIdentifier',
    'Census_ProcessorCoreCount',
    'Census_ProcessorManufacturerIdentifier',
    'Census_ProcessorModelIdentifier', 
    'Census_ProcessorClass',
    'Census_PrimaryDiskTotalCapacity',
    'Census_PrimaryDiskTypeName',
    'Census_SystemVolumeTotalCapacity',  
    'Census_HasOpticalDiskDrive',
    'Census_TotalPhysicalRAM',
    'Census_ChassisTypeName',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',  
    'Census_InternalPrimaryDisplayResolutionHorizontal',  
    'Census_InternalPrimaryDisplayResolutionVertical', 
    'Census_PowerPlatformRoleName',
    'Census_InternalBatteryType',
    'Census_InternalBatteryNumberOfCharges',  
    'Census_OSVersion',
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSBuildNumber',
    'Census_OSBuildRevision',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallTypeName',
    'Census_OSInstallLanguageIdentifier',
    'Census_OSUILocaleIdentifier',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_IsPortableOperatingSystem',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_IsFlightingInternal',
    'Census_IsFlightsDisabled',
    'Census_FlightRing',
    'Census_ThresholdOptIn',
    'Census_FirmwareManufacturerIdentifier',
    'Census_FirmwareVersionIdentifier',
    'Census_IsSecureBootEnabled',
    'Census_IsWIMBootEnabled',
    'Census_IsVirtualDevice',
    'Census_IsTouchEnabled',
    'Census_IsPenCapable',
    'Census_IsAlwaysOnAlwaysConnectedCapable',
    'Wdft_IsGamer',
    'Wdft_RegionIdentifier',
    ]
    template = pd.DataFrame(columns=columns)
    now = datetime.datetime.now()
    filename = 'template' + now.strftime("%d-%m-%Y-%H-%M-%S") + ".csv"
    template.to_csv(filename, index=False)
    eel.ShowMessage("Файл c именем " + filename + " успешно создан")


@eel.expose
def save_results(filepath):
    try:
        result = get_predictions(filepath)
        now = datetime.datetime.now()
        filename = 'result' + now.strftime("%d-%m-%Y-%H-%M-%S") + ".csv"
        result.to_csv('results/' + filename, index=False)
        eel.ShowMessage("Файл c именем " + filename + " успешно сохранен в директории results")
    except Exception:
        eel.ShowMessage("Сохранение файла невозможно")


@eel.expose
def predict(filepath):
    result = pd.DataFrame(columns=['MachineIdentifier', 'HasDetections'])
    try:
        result = get_predictions(filepath)
        return result.to_string()
    except FileNotFoundError:
        print('Файл не найден')
        return 'Файл не найден'
    except pd.errors.ParserError:
        print('Файл имеет неправильный формат')
        return 'Файл имеет неправильный формат'
    except Exception:
        print('Неизвестная ошибка')
        return 'Неизвестная ошибка'


def load_model(path):
    return load(path)


if __name__ == "__main__":
    lgb_model = load_model(model_path)
    eel.init('web')
    eel.start('index.html', size=(1100, 700))
